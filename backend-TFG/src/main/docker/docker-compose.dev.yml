# Este script permite tener una base de datos Postgres disponible dentro de tu máquina local.
# De este modo evitamos conflictos con otras instalaciones de Postgres en la máquina.
# Para ejecutarla es necesario tener docker-compose (y docker) instalados.
#   Arrancar contenedor: ejecutar 'docker-compose -f docker-compose.dev.yml up -d' sobre este fichero.
#   Apagar contenedor: ejecutar 'docker-compose -f docker-compose.dev.yml down' sobre este fichero.

version: '3.3'
services:
  postgres:
    image: 'postgres:14-alpine'
    # Por defecto Postgres se ejecuta en el puerto 5432
    # Vamos a blindar la conexión de nuestra máquina desde un puerto distinto, al puerto de Postgres dentro del contenedor
    # [Puerto que abrimos en nuestra máquina]:[Puerto al que queremos acceder en el contenedor]
    ports:
      - 5430:5432       # Abrimos el localhost:5430 para evitar problemas si tenemos Postgres instalado

    # Creamos una red para evitar conflictos con otras instalaciones existentes en nuestra máquina local
    networks:
      - development_network

    # Mantener el contenedor siempre encendido (para hacer la BD local siempre accesible)
    restart: always         # El contenedor se arrancará automaticamente cuando se encienda la máquina local (a menos que se haya apagado el contenedor)

    # Variables de entorno del contenedor. Se leen de .env.dev en la raíz del proyecto.
    environment:
      POSTGRES_USER: postgres                 # Nombre del usuario por defecto en la BD
      POSTGRES_PASSWORD: password             # Contraseña para acceder a la BD
      POSTGRES_DB: tfg-development            # Base de datos creada por defecto en la BD

    # Crear las tablas tan pronto se arranque el contenedor
    # https://levelup.gitconnected.com/creating-and-filling-a-postgres-db-with-docker-compose-e1607f6f882f
    volumes:
      - ../../main/sql/user-schema.sql:/docker-entrypoint-initdb.d/user-schema.sql    # Crear tablas de subsistema de gestión de usuarios

networks:
  development_network:
    driver: bridge
